var searchIndex = JSON.parse('{\
"argmin":{"doc":"argmin is a numerical optimization toolbox/framework â€¦","t":[14,0,14,0,0,14,13,13,13,13,8,3,8,8,8,4,8,8,8,3,3,8,8,8,8,8,8,8,3,8,8,3,3,8,8,8,8,8,8,13,13,4,13,13,3,13,13,16,16,13,13,3,13,16,13,13,3,18,13,13,13,13,3,13,13,13,8,3,4,3,16,16,8,3,13,13,13,4,3,3,4,10,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,0,11,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,12,12,11,12,5,0,10,11,12,11,10,11,11,11,11,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,0,11,12,11,11,10,10,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,8,8,10,13,10,10,10,10,10,10,10,10,10,8,8,4,8,16,8,13,10,10,11,10,11,10,8,8,8,8,8,8,8,8,8,8,16,16,16,10,3,8,8,8,10,8,8,8,8,8,11,8,8,8,8,8,8,8,8,8,5,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,0,0,5,10,10,10,10,10,10,5,10,10,10,10,5,5,5,10,10,10,10,10,11,10,10,10,0,10,11,11,11,10,10,11,11,10,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,10,11,11,10,0,10,0,10,11,11,10,10,11,11,10,10,10,10,11,10,10,10,10,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,10,0,0,5,10,10,10,10,0,10,10,10,10,10,10,10,10,10,11,11,0,10,10,5,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,10,10,11,11,10,10,10,10,10,10,5,10,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,5,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["check_param","core","make_kv","prelude","solver","trait_bound","Aborted","AcceptedStallIterExceeded","Always","Always","ArgminAdd","ArgminCheckpoint","ArgminConj","ArgminDiv","ArgminDot","ArgminError","ArgminEye","ArgminFloat","ArgminInv","ArgminIterData","ArgminKV","ArgminLineSearch","ArgminMinMax","ArgminMul","ArgminNLCGBetaUpdate","ArgminNorm","ArgminOp","ArgminRandom","ArgminResult","ArgminScaledAdd","ArgminScaledSub","ArgminSlogKV","ArgminSlogLogger","ArgminSub","ArgminTranspose","ArgminTrustRegion","ArgminWeightedDot","ArgminZero","ArgminZeroLike","BestStallIterExceeded","Bincode","CheckpointMode","CheckpointNotFound","ConditionViolated","Error","Every","Every","Float","Hessian","ImpossibleError","InvalidParameter","IterState","JSON","Jacobian","LineSearchConditionMet","MaxItersReached","MinimalNoOperator","NAME","Never","Never","NewBest","NoChangeInCost","NoOperator","NotImplemented","NotInitialized","NotTerminated","Observe","Observer","ObserverMode","OpWrapper","Output","Param","Solver","Surface","TargetCostReached","TargetPrecisionReached","TargetToleranceReached","TerminationReason","Visualizer3d","WriteToFile","WriteToFileSerializer","add","apply","apply","apply","apply","as_ref","as_ref","best_cost","best_cost","best_param","best_param","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","conj","consume_func_counts","consume_op","context","cost","cost","cost","cost_func_count","cost_func_count","default","default","default","default","default","default","default","default","default","default","default","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dir","div","dot","downcast","downcast_mut","downcast_ref","drop","eq","eq","eq","eq","eq","eq","eq","eq","executor","extend","eye","eye_like","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","get_best_cost","get_best_param","get_cost","get_cost","get_cost_func_count","get_grad","get_grad","get_grad_func_count","get_hessian","get_hessian","get_hessian_func_count","get_iter","get_jacobian","get_jacobian","get_jacobian_func_count","get_kv","get_last_best_iter","get_max_iters","get_modify_func_count","get_op","get_param","get_param","get_population","get_population","get_prev_best_cost","get_prev_best_param","get_prev_cost","get_prev_grad","get_prev_hessian","get_prev_jacobian","get_prev_param","get_target_cost","get_termination_reason","get_termination_reason","get_time","grad","grad","grad","grad_func_count","grad_func_count","gradient","gradient","gradient","gradient","hash","hash","hash","hash","hash","hash","hessian","hessian","hessian","hessian","hessian","hessian","hessian","hessian_func_count","hessian_func_count","increment_cost_func_count","increment_func_counts","increment_grad_func_count","increment_hessian_func_count","increment_iter","increment_jacobian_func_count","increment_modify_func_count","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","is","is_best","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","iter","jacobian","jacobian","jacobian","jacobian","jacobian","jacobian_func_count","jacobian_func_count","kv","kv","kv","last_best_iter","last_best_iter","load_checkpoint","macros","max","max_iters","max_iters","merge","min","modify","modify","modify","modify","modify_func_count","modify_func_count","msg","mul","name","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new_best","next_iter","norm","observe_init","observe_init","observe_init","observe_iter","observe_iter","observe_iter","op","operator","operator","param","param","param","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","population","population","population","prev_best_cost","prev_best_param","prev_cost","prev_grad","prev_hessian","prev_jacobian","prev_param","push","push","rand_from_range","reset","root_cause","scaled_add","scaled_sub","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_dir","set_func_counts","set_init_alpha","set_mode","set_name","set_radius","set_search_direction","slog_logger","state","state","store","store_cond","sub","t","take_op","target_cost","target_cost","terminate","terminate_internal","terminated","terminated","termination_reason","termination_reason","termination_reason","text","time","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","visualizer","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted_dot","zero","zero_like","text","text","text","text","text","text","0","0","Executor","add_observer","borrow","borrow_mut","checkpoint_dir","checkpoint_mode","checkpoint_name","clone","clone_into","cost","ctrlc","deserialize","from","from_checkpoint","from_subset","grad","hessian","into","is_in_subset","jacobian","max_iters","new","op","run","serialize","target_cost","timer","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Bincode","JSON","WriteToFile","WriteToFileSerializer","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","ne","new","observe_iter","partial_cmp","partial_cmp","serialize","serialize","serializer","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ArgminSlogKV","ArgminSlogLogger","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","file","file_noblock","from","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","kv","observe_init","observe_iter","serialize","term","term_noblock","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Surface","Visualizer3d","borrow","borrow","borrow_mut","borrow_mut","default","delay","from","from","from_subset","from_subset","into","into","is_in_subset","is_in_subset","new","new","observe_iter","surface","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","E","Empty","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_shl","checked_shr","checked_sub","clamp","clamp_max","clamp_min","classify","cos","cosh","count_ones","count_zeros","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_str_radix","from_subset","from_subset","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_in_subset","is_in_subset","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_zero","kind","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_radians","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","vzip","vzip","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum","brent","conjugategradient","gaussnewton","goldensectionsearch","gradientdescent","landweber","linesearch","neldermead","newton","particleswarm","quasinewton","simulatedannealing","trustregion","Brent","BrentError","WrongSign","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","fmt","fmt","from","from","from_subset","from_subset","init","into","into","is_in_subset","is_in_subset","new","next_iter","serialize","to_owned","to_string","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","beta","cg","nonlinear_cg","FletcherReeves","HestenesStiefel","PolakRibiere","PolakRibierePlus","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","update","update","update","vzip","vzip","vzip","vzip","ConjugateGradient","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","p","p_prev","residual","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","NonlinearConjugateGradient","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","restart_iters","restart_orthogonality","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","gaussnewton_linesearch","gaussnewton_method","GaussNewtonLS","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol","GaussNewton","borrow","borrow_mut","clone","clone_into","default","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_gamma","with_tol","GoldenSectionSearch","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","to_owned","to_subset","to_subset_unchecked","tolerance","try_from","try_into","type_id","vzip","steepestdescent","SteepestDescent","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Landweber","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","backtracking","condition","hagerzhang","morethuente","BacktrackingLineSearch","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","rho","serialize","set_init_alpha","set_search_direction","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","ArmijoCondition","GoldsteinCondition","LineSearchCondition","StrongWolfeCondition","WolfeCondition","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deserialize","deserialize","deserialize","deserialize","eval","eval","eval","eval","eval","fmt","fmt","fmt","fmt","from","from","from","from","from_subset","from_subset","from_subset","from_subset","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","new","new","new","new","requires_cur_grad","requires_cur_grad","requires_cur_grad","requires_cur_grad","requires_cur_grad","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","HagerZhangLineSearch","alpha","borrow","borrow_mut","clone","clone_into","default","delta","deserialize","epsilon","eta","from","from_subset","gamma","init","into","is_in_subset","new","next_iter","serialize","set_init_alpha","set_search_direction","sigma","terminate","theta","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","MoreThuenteLineSearch","alpha","borrow","borrow_mut","c","clone","clone_into","default","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","set_init_alpha","set_search_direction","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","NelderMead","alpha","borrow","borrow_mut","clone","clone_into","default","deserialize","from","from_subset","gamma","init","into","is_in_subset","new","next_iter","rho","sd_tolerance","serialize","sigma","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_initial_params","newton_cg","newton_method","NewtonCG","borrow","borrow_mut","clone","clone_into","curvature_threshold","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol","Newton","borrow","borrow_mut","clone","clone_into","default","deserialize","from","from_subset","into","is_in_subset","new","next_iter","serialize","set_gamma","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Particle","ParticleSwarm","Position","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cost","deserialize","deserialize","fmt","from","from","from_subset","from_subset","init","into","into","is_in_subset","is_in_subset","new","next_iter","position","serialize","serialize","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","bfgs","dfp","lbfgs","sr1","sr1_trustregion","BFGS","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol_cost","with_tol_grad","DFP","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol_grad","LBFGS","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol_cost","with_tol_grad","SR1","borrow","borrow_mut","clone","clone_into","deserialize","from","from_subset","init","into","is_in_subset","new","next_iter","r","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol_cost","with_tol_grad","SR1TrustRegion","borrow","borrow_mut","clone","clone_into","deserialize","eta","from","from_subset","hessian","init","into","is_in_subset","new","next_iter","r","radius","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","with_tol_grad","Boltzmann","Exponential","SATempFunc","SimulatedAnnealing","TemperatureFast","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","deserialize","fmt","from","from","from_subset","from_subset","init","into","into","is_in_subset","is_in_subset","new","next_iter","reannealing_accepted","reannealing_best","reannealing_fixed","serialize","serialize","stall_accepted","stall_best","temp_func","terminate","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","cauchypoint","dogleg","reduction_ratio","steihaug","trustregion_method","CauchyPoint","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","fmt","from","from_subset","into","is_in_subset","ne","new","next_iter","partial_cmp","serialize","set_radius","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Dogleg","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","fmt","from","from_subset","into","is_in_subset","ne","new","next_iter","partial_cmp","serialize","set_radius","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","Steihaug","borrow","borrow_mut","clone","clone_into","default","deserialize","epsilon","eq","fmt","from","from_subset","init","into","is_in_subset","max_iters","ne","new","next_iter","partial_cmp","serialize","set_radius","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","TrustRegion","borrow","borrow_mut","clone","clone_into","deserialize","eta","from","from_subset","init","into","is_in_subset","max_radius","new","next_iter","radius","serialize","terminate","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":["argmin","","","","","","argmin::coreargmin::core::ArgminError","","","","","","argmin::core::CheckpointMode","argmin::core::ObserverMode","argmin::core::executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::slog_logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::visualizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::preludeargmin::prelude::bounds","","","argmin::prelude::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude::identities","","","","","","","","","","argmin::prelude::int","","","","","","","","","","","","","","","","","argmin::prelude::ops","","","","","","argmin::prelude::ops::checked","","","","","","","","","","","","","","","","argmin::prelude::ops::inv","","","argmin::prelude::ops::mul_add","","","","","argmin::prelude::ops::overflowing","","","","","","argmin::prelude::ops::saturating","","","","","","","","","argmin::prelude::ops::wrapping","","","","","","","","","","","","argmin::prelude::pow","","","","","argmin::prelude::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude::sign","","","","","","","","","","argmin::solver","","","","","","","","","","","","","argmin::solver::brent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::conjugategradient","","","argmin::solver::conjugategradient::beta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::conjugategradient::cg","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::conjugategradient::nonlinear_cg","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::gaussnewton","","argmin::solver::gaussnewton::gaussnewton_linesearch","","","","","","","","","","","","","","","","","","","","","","argmin::solver::gaussnewton::gaussnewton_method","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::goldensectionsearch","","","","","","","","","","","","","","","","","","","","","","argmin::solver::gradientdescent","argmin::solver::gradientdescent::steepestdescent","","","","","","","","","","","","","","","","","","","","argmin::solver::landweber","","","","","","","","","","","","","","","","","","","","argmin::solver::linesearch","","","","argmin::solver::linesearch::backtracking","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::linesearch::condition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::linesearch::hagerzhang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::linesearch::morethuente","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::neldermead","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::newton","","argmin::solver::newton::newton_cg","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::newton::newton_method","","","","","","","","","","","","","","","","","","","","","","argmin::solver::particleswarm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton","","","","","argmin::solver::quasinewton::bfgs","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton::dfp","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton::lbfgs","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton::sr1","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton::sr1_trustregion","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::simulatedannealing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::simulatedannealing::SATempFunc","argmin::solver::trustregion","","","","","argmin::solver::trustregion::cauchypoint","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::trustregion::dogleg","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::trustregion::steihaug","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::trustregion::trustregion_method","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Release an <code>T</code> from an <code>Option&lt;T&gt;</code> if it is not <code>None</code>. If it is â€¦","Core functionality Argmin Optimizaton toolbox core","Creates an <code>ArgminKV</code> at compile time in order to avoid â€¦","Definition of all relevant traits and types","Solvers","Reuse a list of trait bounds by giving it a name, e.g. â€¦","Aborted","Acceped stall iter exceeded","Call observer in every iteration","Create checkpoint in every iteration","Add a <code>T</code> to <code>self</code>","Checkpoint","Return the conjugate","(Pointwise) Divide a <code>T</code> by <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code>","Argmin error type","Identity matrix","Trait alias to simplify common trait bounds","Compute the inverse (<code>T</code>) of <code>self</code>","The datastructure which is returned by the <code>next_iter</code> â€¦","A simple key-value storage","Defines a common interface for line search methods.","Minimum and Maximum of type <code>T</code>","(Pointwise) Multiply a <code>T</code> with <code>self</code>","Common interface for beta update methods (Nonlinear-CG)","Compute the l2-norm (<code>U</code>) of <code>self</code>","This trait needs to be implemented for every operator/cost â€¦","Create a random number","Final struct returned by the <code>run</code> method of <code>Executor</code>.","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","This type is necessary in order to be able to implement â€¦","A logger based on <code>slog</code>","Subtract a <code>T</code> from <code>self</code>","Return the transpose (<code>U</code>) of <code>self</code>","Defines a common interface to methods which calculate â€¦","Dot/scalar product of <code>T</code> and <code>self</code> weighted by W (p^TWv)","Return param vector of all zeros (for now, this is a hack. â€¦","Zero for dynamically sized objects","Best stall iter exceeded","Bincode","Defines at which intervals a checkpoint is saved.","Checkpoint was not found","Indicates that a condition is violated","The <code>Error</code> type, a wrapper around a dynamic error type.","Call observer every N iterations","Create checkpoint every N iterations","Precision of floats","Type of Hessian","Indicates an impossible error","Indicates and invalid parameter","Maintains the state from iteration to iteration of a solver","JSON","Type of Jacobian","Condition for Line search met","Maximum number of iterations reached","Minimal No-op operator which does nothing, really.","Name of the solver","Never call the observer","Never create checkpoint","Call observer when new best is found","Cost function value did not change","Fake Operators for testing No-op operator with free choice â€¦","Indicates that a function is not implemented","Indicates that a function is not initialized","In case it has not terminated yet","Defines the interface every Observer needs to expose","Container for observers which acts just like a single â€¦","This is used to indicate how often the observer will â€¦","This wraps an operator and keeps track of how often the â€¦","Output of the operator","Type of the parameter vector","Solver","Helper class for visualized surface","Target cost function value reached","Target precision reached","Target tolerance reached","Indicates why the optimization algorithm stopped","Visualize iterations of a solver for cost functions of type","Write parameter vectors to file","Different kinds of serializers","Add a <code>T</code> to <code>self</code>","Applies the operator/cost function to parameters","Do nothing, really.","Do nothing, really.","Calls the <code>apply</code> method of <code>op</code> and increments <code>cost_func_count</code>â€¦","","","Set the current best cost function value. This shifts the â€¦","Current best cost function value","Set best paramater vector. This shifts the stored best â€¦","Current best parameter vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator of the chain of source errors contained by â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return conjugate","Adds function evaluation counts of another operator.","Consumes an operator by increasing the function call â€¦","Wrap the error value with additional context.","Set the current cost function value. This shifts the â€¦","Set cost function value","Current cost function value","Number of cost function evaluations so far","Number of cost function evaluations","","","","","","The default is <code>Always</code>","","","","","","","","","","","","","","","","","Get directory of checkpoint","(Pointwise) Divide a <code>T</code> by <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code>","Attempt to downcast the error object to a concrete type.","Downcast this error object by mutable reference.","Downcast this error object by reference.","","","","","","","","","","Executor","","Identity matrix of size <code>n</code>","Identity matrix of same size as <code>self</code>","Output parameter vectors to file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns current best cost function value","Returns best parameter vector","Returns current cost function value","Get cost function value","Returns current cost function evaluation count","Returns gradient","Get gradient","Returns current gradient function evaluation count","Returns current Hessian","Get Hessian","Returns current Hessian function evaluation count","Returns current number of iterations","Returns current Jacobian","Get Jacobian","Returns current Jacobian function evaluation count","Return KV","Returns iteration number where the last best parameter â€¦","Returns maximum number of iterations","Returns current Modify function evaluation count","Returns the operator <code>op</code> by taking ownership of <code>self</code>.","Returns current parameter vector","Get parameter vector","Returns population","Get reference to population","Returns previous best cost function value","Returns previous best parameter vector","Returns previous cost function value","Returns previous gradient","Returns previous Hessian","Returns previous Jacobian","Returns previous parameter vector","Returns target cost","Get termination_reason","Get termination reason","Get time required so far","Set gradient. This shifts the stored gradient to the â€¦","Set gradient","Current gradient","Number of gradient evaluations so far","Number of gradient function evaluations","Computes the gradient at the given parameters","Do nothing, really.","Do nothing, really.","Calls the <code>gradient</code> method of <code>op</code> and increments â€¦","","","","","","","Computes the Hessian at the given parameters","Set Hessian. This shifts the stored Hessian to the â€¦","Do nothing, really.","Do nothing, really.","Calls the <code>hessian</code> method of <code>op</code> and increments â€¦","Set Hessian","Current Hessian","Number of Hessian evaluations so far","Number of Hessian function evaluations","Increment cost function evaluation count by <code>num</code>","Increment all function evaluation counts by the evaluation â€¦","Increment gradient function evaluation count by <code>num</code>","Increment Hessian function evaluation count by <code>num</code>","Increment the number of iterations by one","Increment Jacobian function evaluation count by <code>num</code>","Increment modify function evaluation count by <code>num</code>","Initializes the algorithm","","","","","","","","","","","","","","","Compute the inverse","Returns true if <code>E</code> is the type held by this error object.","Returns whether the current parameter vector is also the â€¦","Returns true if <code>observers</code> is empty","","","","","","","","","","","","","","","Current iteration","Computes the Hessian at the given parameters","Set Jacobian. This shifts the stored Jacobian to the â€¦","Calls the <code>jacobian</code> method of <code>op</code> and increments â€¦","Set Jacobian","Current Jacobian","Number of Jacobian evaluations so far","Number of Jacobian function evaluations","Adds an <code>ArgminKV</code>","Key value store","The actual key value storage","Set iteration number where the previous best parameter â€¦","Iteration number of last best cost","Load a checkpoint from disk","Macros","Select piecewise maximum","Set maximum number of iterations","Maximum number of iterations","Merge another <code>kv</code> into <code>self.kv</code>","Select piecewise minimum","Modifies a parameter vector. Comes with a variable that â€¦","Do nothing, really.","Do nothing, really.","Calls the <code>modify</code> method of <code>op</code> and increments â€¦","Number of modify evaluations so far","Number of <code>modify</code> function evaluations","Create a new error object from a printable error message.","(Pointwise) Multiply a <code>T</code> with <code>self</code>","Get name of checkpoint","","","","","","Create new IterState from <code>param</code>","Constructor","Constructor","Constructor","Constructor","Construct an <code>OpWrapper</code> from an operator","Constructor","Define a new checkpoint","Constructor","Create a new error object from any error type.","Indicate that a new best parameter vector was found","Computes one iteration of the algorithm.","Compute the l2-norm (<code>U</code>) of <code>self</code>","Called once at the beginning of the execution of the â€¦","Called once at the beginning of the execution of the â€¦","Initial observation This is called after the â€¦","Called at every iteration of the solver","Called at every iteration of the solver","This is called after every iteration and gets the current â€¦","Operator","Return handle to operator","operator","Set parameter vector. This shifts the stored parameter â€¦","Set parameter vector","Current parameter vector","","","","","","","","","Set population","Set Population","All members for population-based algorithms as (param, â€¦","Previous best cost function value","Previous best parameter vector","Previous cost function value","Previous gradient","Previous Hessian","Previous Jacobian","Previous parameter vector","Push a key-value pair to the <code>kv</code> vector.","Push another <code>Observe</code> to the <code>observer</code> field","Get a random element between min and max,","Reset the cost function counts to zero.","The lowest level cause of this error â€” this errorâ€™s â€¦","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","","","","","","","","","","","Set directory of checkpoint","Set all function evaluation counts to the evaluation â€¦","Set the initial step length","Set mode of checkpoint","Set name of checkpoint","Set the initial step length","Set the search direction","Loggers based on the <code>slog</code> crate","Return handle to state","iteration state","Write checkpoint to disk","Write checkpoint based on the desired <code>CheckpointMode</code>","Subtract a <code>T</code> from <code>self</code>","Transpose","Moves the operator out of the struct and replaces it with â€¦","Set target cost value","Target cost function value","Checks whether the algorithm must be terminated","Checks whether basic termination reasons apply.","Return whether the algorithm has terminated or not","Returns <code>true</code> if a solver terminated and <code>false</code> otherwise","Set termination_reason","Set termination reason","Reason of termination","Returns a texual representation of what happened","Set time required so far","Time required so far","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update beta Parameter 1: \\\\nabla f_k Parameter 2: \\\\nabla f_â€¦","Observer which visualizes the progress of the solver","","","","","","","","","","","","","","","Dot/scalar product of <code>T</code> and <code>self</code>","Return zero(s)","Return zero(s)","Text","Text","Text","Text","Text","Text","","","Executes a solver","Attaches a observer which implements <code>ArgminLog</code> to the â€¦","","","Set checkpoint directory","Set the checkpoint mode","Set checkpoint name","","","Set cost value","Turn Ctrl-C handling on or off (default: on)","","","Create a new executor from a checkpoint","","Set Gradient","Set Hessian","","","Set Jacobian","Set maximum number of iterations","Create a new executor with a <code>solver</code> and an initial â€¦","operator","Run the executor","","Set target cost value","Turn timer on or off (default: on)","","","","","","","","Bincode","JSON","Write parameter vectors to file","Different kinds of serializers","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>WriteToFile</code> struct","","","","","","Set serializer","","","","","","","","","","","","","","","This type is necessary in order to be able to implement â€¦","A logger based on <code>slog</code>","","","","","","","Log JSON to a file in a blocking way","Log JSON to a file in a non-blocking way (in case of â€¦","","","","","","","","","","Key value store","Log general info","This should be used to log iteration data only (because â€¦","","Log to the terminal in a blocking way","Log to the terminal in a non-blocking way (in case of â€¦","","","","","","","","","","","","","","Helper class for visualized surface","Visualize iterations of a solver for cost functions of type","","","","","","Set delay","","","","","","","","","Create a new visualizer","Create a new surface","","Set surface","","","","","","","","","","","","","A generic interface for casting between machine scalars â€¦","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping â€¦","Performs division that returns <code>None</code> instead of panicking â€¦","Performs multiplication that returns <code>None</code> instead of â€¦","Performs negation that returns <code>None</code> if the result canâ€™t â€¦","Performs an integral remainder that returns <code>None</code> instead â€¦","Performs a left shift that returns <code>None</code> on shifts larger â€¦","Performs a right shift that returns <code>None</code> on shifts larger â€¦","Performs subtraction that returns <code>None</code> instead of wrapping â€¦","Return Eulerâ€™s number.","","Return <code>1.0 / Ï€</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / Ï€</code>.","Return <code>2.0 / sqrt(Ï€)</code>.","Return <code>Ï€ / 2.0</code>.","Return <code>Ï€ / 3.0</code>.","Return <code>Ï€ / 4.0</code>.","Return <code>Ï€ / 6.0</code>.","Return <code>Ï€ / 8.0</code>.","Generic trait for floating point numbers","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, â€¦","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","The fused multiply-add assignment operation.","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, â€¦","The trait for <code>Num</code> types which also implement assignment â€¦","The trait for types implementing numeric assignment â€¦","The trait for <code>NumAssign</code> types which also implement â€¦","An interface for casting between machine scalars.","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric â€¦","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedesâ€™ constant <code>Ï€</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for references which implement numeric â€¦","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, â€¦","Performs addition that saturates at the numeric bounds â€¦","Performs multiplication that saturates at the numeric â€¦","Performs subtraction that saturates at the numeric bounds â€¦","Useful functions for signed numbers (i.e. numbers that can â€¦","Return the full circle constant <code>Ï„</code>.","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>â€¦","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Adds two numbers, checking for overflow. If overflow â€¦","Divides two numbers, checking for underflow, overflow and â€¦","Multiplies two numbers, checking for underflow or â€¦","Negates a number, returning <code>None</code> for results that canâ€™t â€¦","Raises a value to the power of exp, returning <code>None</code> if an â€¦","Finds the remainder of dividing two numbers, checking for â€¦","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> â€¦","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> â€¦","Subtracts two numbers, checking for underflow. If â€¦","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of â€¦","Returns the number of zeros in the binary representation â€¦","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the â€¦","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted â€¦","","","Convert an integer from big endian to the targetâ€™s â€¦","Converts a <code>f32</code> to return an optional value of this type. â€¦","Converts a <code>f64</code> to return an optional value of this type. â€¦","Converts an <code>i128</code> to return an optional value of this type. â€¦","Converts an <code>i16</code> to return an optional value of this type. â€¦","Converts an <code>i32</code> to return an optional value of this type. â€¦","Converts an <code>i64</code> to return an optional value of this type. â€¦","Converts an <code>i8</code> to return an optional value of this type. â€¦","Converts an <code>isize</code> to return an optional value of this â€¦","Convert an integer from little endian to the targetâ€™s â€¦","Convert from a string and radix (typically <code>2..=36</code>).","","","Converts an <code>u128</code> to return an optional value of this type. â€¦","Converts an <code>u16</code> to return an optional value of this type. â€¦","Converts an <code>u32</code> to return an optional value of this type. â€¦","Converts an <code>u64</code> to return an optional value of this type. â€¦","Converts an <code>u8</code> to return an optional value of this type. â€¦","Converts a <code>usize</code> to return an optional value of this type. â€¦","Calculate the length of the hypotenuse of a right-angle â€¦","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as â€¦","","","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is positive infinity or â€¦","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the â€¦","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if <code>self</code> is equal to the multiplicative â€¦","Returns true if the number is positive and false if the â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading zeros in the binary â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","returns the largest finite number this type can represent","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","returns the smallest finite number this type can represent","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation â€¦","Raises self to the power of <code>exp</code>, using exponentiation by â€¦","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Returns the nearest integer to a number. Round half-way â€¦","Saturating addition operator. Returns a+b, saturating at â€¦","Saturating addition. Computes <code>self + other</code>, saturating at â€¦","Saturating multiplication. Computes <code>self * other</code>, â€¦","Saturating subtraction operator. Returns a-b, saturating â€¦","Saturating subtraction. Computes <code>self - other</code>, saturating â€¦","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>â€¦","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, â€¦","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the targetâ€™s endianness.","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value â€¦","Convert <code>self</code> to little endian from the targetâ€™s â€¦","Converts degrees to radians.","","","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be â€¦","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot â€¦","Returns the number of trailing zeros in the binary â€¦","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","","","Wrapping (modular) addition. Computes <code>self + other</code>, â€¦","Wrapping (modular) multiplication. Computes <code>self * other</code>, â€¦","Wrapping (modular) negation. Computes <code>-self</code>, wrapping â€¦","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, â€¦","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, â€¦","Wrapping (modular) subtraction. Computes <code>self - other</code>, â€¦","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars â€¦","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted â€¦","Converts a <code>f32</code> to return an optional value of this type. â€¦","Converts a <code>f64</code> to return an optional value of this type. â€¦","Converts an <code>i128</code> to return an optional value of this type. â€¦","Converts an <code>i16</code> to return an optional value of this type. â€¦","Converts an <code>i32</code> to return an optional value of this type. â€¦","Converts an <code>i64</code> to return an optional value of this type. â€¦","Converts an <code>i8</code> to return an optional value of this type. â€¦","Converts an <code>isize</code> to return an optional value of this â€¦","Converts an <code>u128</code> to return an optional value of this type. â€¦","Converts an <code>u16</code> to return an optional value of this type. â€¦","Converts an <code>u32</code> to return an optional value of this type. â€¦","Converts an <code>u64</code> to return an optional value of this type. â€¦","Converts an <code>u8</code> to return an optional value of this type. â€¦","Converts a <code>usize</code> to return an optional value of this type. â€¦","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to â€¦","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot â€¦","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value â€¦","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot â€¦","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be â€¦","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot â€¦","Return Eulerâ€™s number.","Return <code>1.0 / Ï€</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / Ï€</code>.","Return <code>2.0 / sqrt(Ï€)</code>.","Return <code>Ï€ / 2.0</code>.","Return <code>Ï€ / 3.0</code>.","Return <code>Ï€ / 4.0</code>.","Return <code>Ï€ / 6.0</code>.","Return <code>Ï€ / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with â€¦","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedesâ€™ constant <code>Ï€</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>Ï„</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","Computes the absolute value of <code>self</code>. Returns â€¦","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>â€¦","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Returns the smallest integer greater than or equal to a â€¦","Returns the floating point category of the number. If only â€¦","Returns the floating point category of the number. If only â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the â€¦","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle â€¦","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as â€¦","Returns the mantissa, base 2 exponent, and sign as â€¦","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or â€¦","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if the number is neither zero, infinite, â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can â€¦","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","Returns the smallest positive, normalized value that this â€¦","Returns the smallest finite value that this type can â€¦","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the â€¦","Returns the nearest integer to a number. Round half-way â€¦","Returns the nearest integer to a number. Round half-way â€¦","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, â€¦","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative â€¦","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>â€¦","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of â€¦","Returns the number of zeros in the binary representation â€¦","Convert an integer from big endian to the targetâ€™s â€¦","Convert an integer from little endian to the targetâ€™s â€¦","Returns the number of leading zeros in the binary â€¦","Raises self to the power of <code>exp</code>, using exponentiation by â€¦","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the targetâ€™s endianness.","Convert <code>self</code> to little endian from the targetâ€™s â€¦","Returns the number of trailing zeros in the binary â€¦","Shifts the bits to the left by a specified amount, <code>n</code>, â€¦","Shifts the bits to the right by a specified amount, <code>n</code>, â€¦","","","","","","","Performs addition that returns <code>None</code> instead of wrapping â€¦","Performs division that returns <code>None</code> instead of panicking â€¦","Performs multiplication that returns <code>None</code> instead of â€¦","Performs negation that returns <code>None</code> if the result canâ€™t â€¦","Performs an integral remainder that returns <code>None</code> instead â€¦","Performs a left shift that returns <code>None</code> on shifts larger â€¦","Performs a right shift that returns <code>None</code> on shifts larger â€¦","Performs subtraction that returns <code>None</code> instead of wrapping â€¦","Adds two numbers, checking for overflow. If overflow â€¦","Divides two numbers, checking for underflow, overflow and â€¦","Multiplies two numbers, checking for underflow or â€¦","Negates a number, returning <code>None</code> for results that canâ€™t â€¦","Finds the remainder of dividing two numbers, checking for â€¦","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> â€¦","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> â€¦","Subtracts two numbers, checking for underflow. If â€¦","Unary operator for retrieving the multiplicative inverse, â€¦","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating â€¦","Returns a tuple of the product along with a boolean â€¦","Returns a tuple of the difference along with a boolean â€¦","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, â€¦","Performs addition that saturates at the numeric bounds â€¦","Performs multiplication that saturates at the numeric â€¦","Performs subtraction that saturates at the numeric bounds â€¦","Saturating addition operator. Returns a+b, saturating at â€¦","Saturating addition. Computes <code>self + other</code>, saturating at â€¦","Saturating multiplication. Computes <code>self * other</code>, â€¦","Saturating subtraction operator. Returns a-b, saturating â€¦","Saturating subtraction. Computes <code>self - other</code>, saturating â€¦","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, â€¦","Wrapping (modular) multiplication. Computes <code>self * other</code>, â€¦","Wrapping (modular) negation. Computes <code>-self</code>, wrapping â€¦","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, â€¦","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, â€¦","Wrapping (modular) subtraction. Computes <code>self - other</code>, â€¦","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an â€¦","Raises a value to the power of exp, using exponentiation â€¦","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have â€¦","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> â€¦","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in â€¦","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in â€¦","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in â€¦","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>â€¦","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a â€¦","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the â€¦","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle â€¦","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, â€¦","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, â€¦","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an â€¦","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can â€¦","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this â€¦","Returns the smallest finite value that this type can â€¦","Fused multiply-add. Computes <code>(self * a) + b</code> with only one â€¦","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way â€¦","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, â€¦","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can â€¦","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the â€¦","Returns true if the number is positive and false if the â€¦","Returns the sign of the number.","Returns the sign of the number.","Brentâ€™s method","Conjugate Gradient methods","Newton Methods","References:","Gradient descent methods","Landweber iteration","Line search methods","References:","Newton Methods","References:","Quasi-Newton methods","Simulated AnnealingReferences","Argmin Trust region methods","Brentâ€™s method","Error to be thrown if Brent is initialized with improper â€¦","f(min) and f(max) must have different signs","","","","","","","","","","","","","","","","","","","Constructor The values <code>min</code> and <code>max</code> must bracketing the â€¦","","","","","","","","","","","","","","","","","Beta update methods for nonlinear CG","Conjugate gradient method","Nonlinear conjugate gradient method Important TODO: Find â€¦","Fletcher and Reeves (FR) method TODO: Reference","Hestenes and Stiefel (HS) method TODO: Reference","Polak and Ribiere (PR) method TODO: Reference","Polak and Ribiere Plus (PR+) method TODO: Reference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructor","Constructor","Constructor","Constructor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The conjugate gradient method is a solver for systems of â€¦","","","","","","","","","","","Constructor","Perform one iteration of CG algorithm","Return the current search direction (This is needed by â€¦","Return the previous search direction (This is needed by â€¦","Return the current residual (This is needed by NewtonCG â€¦","","","","","","","","","The nonlinear conjugate gradient is a generalization of â€¦","","","","","","","","","","","Constructor (Polak Ribiere Conjugate Gradient (PR-CG))","","Specifiy the number of iterations after which a restart â€¦","Set the value for the orthogonality measure. Setting this â€¦","","","","","","","","","Gauss-Newton method with linesearch","Gauss-Newton method","Gauss-Newton method with linesearch","","","","","","","","","","Constructor","","","","","","","","","","","Set tolerance for the stopping criterion based on cost â€¦","Gauss-Newton method","","","","","","","","","","","Constructor","","","","","","","","","","","set gamma","Set tolerance for the stopping criterion based on cost â€¦","Golden-section search","","","","","","","","","","","Constructor","","","","","","Set tolerance","","","","","Steepest Descent method","Steepest descent iteratively takes steps in the direction â€¦","","","","","","","","","","Constructor","","","","","","","","","","The Landweber iteration is a solver for ill-posed linear â€¦","","","","","","","","","","Constructor","","","","","","","","","","Backtracking line search algorithm","Acceptance conditions","Hager-Zhang line search algorithm","More-Thuente line search algorithm TODO: Apparently it is â€¦","The Backtracking line search is a simple method to find a â€¦","","","","","","","","","","","Constructor","","Set rho","","Set initial alpha value","Set search direction","","","","","","","","","Armijo Condition","Goldstein conditions","Needs to be implemented by everything that wants to be a â€¦","Strong Wolfe conditions","Wolfe Condition","","","","","","","","","","","","","","","","","","","","","","","","","Evaluate the condition","","","","","","","","","","","","","","","","","","","","","","","","","Constructor","Constructor","Constructor","Constructor","Indicates whether this condition requires the computation â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The Hager-Zhang line search is a method to find a step â€¦","set alpha limits","","","","","","set delta","","set epsilon","set eta","","","set gamma","","","","Constructor","","","Set initial alpha value","Set search direction","set sigma","","set theta","","","","","","","","The More-Thuente line search is a method to find a step â€¦","set alpha limits","","","Set c1 and c2 where 0 &lt; c1 &lt; c2 &lt; 1.","","","","","","","","","","Constructor","","","Set initial alpha value","Set search direction","","","","","","","","Nelder-Mead method","set alpha","","","","","","","","","set gamma","","","","Constructor","","set rho","Set Sample standard deviation tolerance","","set sigma","","","","","","","","","Add initial parameters","Newton-CG method TODO: Stop when search direction is close â€¦","Newtonâ€™s method","The Newton-CG method (also called truncated Newton method) â€¦","","","","","Set curvature threshold","","","","","","Constructor","","","","","","","","","","","Set tolerance for the stopping criterion based on cost â€¦","Newtonâ€™s method iteratively finds the stationary points â€¦","","","","","","","","","","","Constructor","","","set gamma","","","","","","","","A single particle","Particle Swarm Optimization (PSO)","Position","","","","","","","Cost of particle","","","","","","","","","","","","","Constructor","Perform one iteration of algorithm","Position of particle","","","","","","","","","","","","","","","","References:","References:","References:","References:","References:","BFGS method","","","","","","","","","","","Constructor","","","","","","","","","","","Sets tolerance for the stopping criterion based on the â€¦","Sets tolerance for the stopping criterion based on the â€¦","DFP method","","","","","","","","","","","Constructor","","","","","","","","","","","Sets tolerance for the stopping criterion based on the â€¦","L-BFGS method","","","","","","","","","","","Constructor","","","","","","","","","","","Sets tolerance for the stopping criterion based on the â€¦","Sets tolerance for the stopping criterion based on the â€¦","SR1 method (broken!)","","","","","","","","","","","Constructor","","Set r","","","","","","","","","","Sets tolerance for the stopping criterion based on the â€¦","Sets tolerance for the stopping criterion based on the â€¦","SR1 Trust Region method","","","","","","Set eta","","","provide initial Hessian (if not provided, the algorithm â€¦","","","","Constructor","","Set r","set radius","","","","","","","","","","Sets tolerance for the stopping criterion based on the â€¦","<code>t_i = t_init / ln(i)</code>","<code>t_i = t_init * x^i</code>","Temperature functions for Simulated Annealing.","Simulated Annealing","<code>t_i = t_init / i</code>","","","","","","","","","","","","","","","","","","","","","","Constructor","Perform one iteration of SA algorithm","Start reannealing after no accepted solution has been â€¦","Start reannealing after no new best solution has been â€¦","Start reannealing after <code>iter</code> iterations","","","The optimization stops after there has been no accepted â€¦","The optimization stops after there has been no new best â€¦","Set temperature function to one of the options in â€¦","","","","","","","","","","","","","","","","","Cauchy Point","Dogleg method","Computes reduction ratio","Steihaug method","Trust region solver","The Cauchy point is the minimum of the quadratic â€¦","","","","","","","","","","","","","","Constructor","","","","","","","","","","","","","The Dogleg method computes the intersection of the trust â€¦","","","","","","","","","","","","","","Constructor","","","","","","","","","","","","","The Steihaug method is a conjugate gradients based â€¦","","","","","","","Set epsilon","","","","","","","","set maximum number of iterations","","Constructor","","","","","","","","","","","","","The trust region method approximates the cost function â€¦","","","","","","Set eta","","","","","","Set maximum radius","Constructor","","set radius","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,0,5,5,0,2,3,6,6,5,5,0,4,6,1,1,0,7,2,3,2,1,0,5,5,1,0,0,0,0,6,6,0,0,1,1,1,0,0,0,0,8,6,9,10,11,12,12,13,13,13,13,5,13,14,9,10,15,2,11,16,3,17,1,18,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,12,13,14,9,10,15,2,11,16,3,17,1,18,13,14,9,10,15,2,11,16,3,17,1,18,14,9,10,2,16,3,17,1,19,11,11,12,13,18,13,13,11,13,14,9,10,15,2,11,3,17,1,18,12,12,13,14,9,10,2,11,3,17,1,17,20,21,12,12,12,12,14,9,10,2,16,3,17,1,0,14,22,22,0,5,5,13,14,14,9,9,10,10,2,11,16,3,3,17,1,1,18,12,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,12,12,14,5,13,14,9,10,15,2,11,16,3,17,1,18,12,13,13,13,18,13,13,18,13,13,18,13,13,13,18,13,18,13,13,13,11,13,18,13,18,13,13,13,13,13,13,13,13,13,18,13,13,18,13,13,11,6,9,10,11,14,9,10,3,17,1,6,13,9,10,11,18,13,13,11,13,13,13,13,13,13,13,7,5,13,14,9,10,15,2,11,16,3,17,1,18,12,23,12,13,15,5,13,14,9,10,15,2,11,16,3,17,1,18,12,13,6,13,11,18,13,13,11,18,24,14,13,13,0,0,25,13,13,14,25,6,9,10,11,13,11,12,26,17,14,9,2,3,17,13,14,9,10,15,11,16,17,18,12,13,7,27,28,28,15,28,28,15,11,16,16,13,18,13,14,9,10,2,16,3,17,1,13,18,13,13,13,13,13,13,13,13,14,15,29,11,12,30,31,13,13,14,9,10,2,11,3,17,1,17,13,32,17,17,33,32,0,16,16,17,17,34,35,11,13,13,7,7,13,1,13,18,13,1,13,13,13,14,9,10,15,2,11,16,3,17,1,18,5,14,9,10,16,3,1,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,5,13,14,9,10,15,2,11,16,3,17,1,18,12,36,0,5,13,14,9,10,15,2,11,16,3,17,1,18,12,37,38,39,40,41,42,43,44,45,46,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,4,4,0,0,4,49,4,49,4,49,4,49,4,49,4,4,49,4,49,4,49,4,49,4,49,4,49,4,49,49,49,49,4,49,4,49,49,4,49,4,49,4,49,4,49,4,49,4,49,4,49,0,0,24,50,24,50,50,50,50,50,24,24,50,24,50,24,50,24,50,24,50,50,24,50,50,50,24,50,24,50,24,50,24,50,24,50,24,50,0,0,51,52,51,52,51,51,51,52,51,52,51,52,51,52,51,52,51,51,51,52,51,52,51,52,51,52,51,52,51,52,0,0,0,0,0,0,0,0,0,0,53,54,53,53,53,53,53,53,53,53,53,0,0,0,0,55,0,54,53,53,53,53,53,53,0,0,0,0,0,0,0,0,0,0,56,57,58,53,0,0,0,0,53,0,0,0,0,0,53,0,0,0,0,0,0,0,0,0,0,59,60,0,59,60,59,59,61,59,59,59,59,59,54,62,54,62,0,0,0,59,59,63,64,65,66,0,67,68,69,70,0,0,0,59,59,59,71,71,59,59,59,59,0,59,54,62,62,59,72,54,62,71,73,73,73,73,73,73,73,73,71,55,54,62,73,73,73,73,73,73,59,0,59,0,59,54,62,56,59,54,62,59,59,60,59,74,60,59,59,75,62,71,59,59,59,59,59,59,76,59,59,59,76,59,59,57,77,59,59,59,0,74,0,0,0,71,58,59,59,0,59,71,71,59,78,79,80,78,81,74,75,0,71,71,0,59,60,59,59,59,59,71,59,59,71,59,82,82,82,82,82,82,82,82,71,59,62,54,62,54,62,82,82,82,82,82,82,71,59,54,62,54,62,54,62,71,71,54,62,83,84,85,86,87,88,0,75,0,76,76,0,0,0,0,61,0,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,82,82,82,82,82,82,82,82,82,82,82,82,82,82,53,53,53,53,53,53,53,53,53,53,0,0,0,53,53,53,53,53,53,53,53,53,59,89,59,59,59,59,59,59,59,59,59,59,89,89,59,59,59,89,59,59,59,59,59,89,59,89,59,89,59,89,59,59,89,59,89,59,89,59,89,59,89,59,89,59,59,59,59,59,59,89,89,59,59,89,89,59,89,59,59,89,59,89,59,89,59,59,59,89,59,89,59,89,59,89,59,59,59,59,59,59,89,59,89,59,59,89,0,0,74,75,0,74,74,75,0,75,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,64,65,66,67,68,69,70,0,56,56,0,0,57,57,77,0,0,0,90,91,92,0,0,0,0,78,79,80,78,81,0,0,0,0,0,0,83,84,85,86,87,88,58,0,0,0,58,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,60,0,60,60,60,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,94,95,94,95,95,95,95,94,94,94,95,94,95,95,94,95,94,95,95,95,95,95,94,94,95,94,95,94,95,94,95,94,95,94,95,0,0,0,0,0,0,0,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,96,97,98,99,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,0,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,0,0,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,0,0,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,112,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,112,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,108,109,110,111,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,0,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,0,118,119,118,119,119,119,119,118,119,119,118,119,118,119,118,118,119,118,119,118,118,119,118,119,119,118,119,118,119,118,119,118,119,118,119,118,119,0,0,0,0,0,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,0,0,125,125,126,125,126,125,126,125,126,125,125,126,125,125,126,125,126,126,125,126,125,126,126,126,126,126,126,125,126,126,126,126,126,125,126,125,126,125,126,125,126,125,126,125,126,125,126,127,0,0,0,0,0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["result",4,["error"]],["error",3]]],[[],["error",8]],[[],["error",8]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["chain",3]],[[],["iterstate",3]],[[],["argminkv",3]],[[],["nooperator",3]],[[],["minimalnooperator",3]],[[],["observer",3]],[[],["observermode",4]],[[],["opwrapper",3]],[[],["argminresult",3]],[[],["checkpointmode",4]],[[],["argmincheckpoint",3]],[[],["terminationreason",4]],[[],["argminiterdata",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argminkv",3]],["ordering",4]],[[["nooperator",3]],["ordering",4]],[[["minimalnooperator",3]],["ordering",4]],[[["observermode",4]],["ordering",4]],[[["argminresult",3]],["ordering",4]],[[["checkpointmode",4]],["ordering",4]],[[["argmincheckpoint",3]],["ordering",4]],[[["terminationreason",4]],["ordering",4]],[[]],[[["opwrapper",3],["argminop",8]]],[[["opwrapper",3]]],[[],["error",3]],[[]],[[]],null,null,null,[[]],[[],["argminkv",3]],[[],["nooperator",3]],[[],["minimalnooperator",3]],[[],["observer",3]],[[],["observermode",4]],[[],["opwrapper",3]],[[],["checkpointmode",4]],[[],["argmincheckpoint",3]],[[]],[[],["argminiterdata",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["string",3]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],["option",4]],[[],["option",4]],[[]],[[["argminkv",3]],["bool",15]],[[["nooperator",3]],["bool",15]],[[["minimalnooperator",3]],["bool",15]],[[["observermode",4]],["bool",15]],[[["argminresult",3]],["bool",15]],[[["checkpointmode",4]],["bool",15]],[[["argmincheckpoint",3]],["bool",15]],[[["terminationreason",4]],["bool",15]],null,[[["intoiterator",8]]],[[["usize",15]]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["error",3]],[[["never",15]]],[[]],[[["intoiterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["u64",15]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[],["u64",15]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[],["argminkv",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],["option",4]],[[],[["vec",3],["option",4,["vec"]]]],[[],[["vec",3],["option",4,["vec"]]]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["terminationreason",4]],[[],[["terminationreason",4],["option",4,["terminationreason"]]]],[[],[["option",4,["duration"]],["duration",3]]],[[]],[[]],null,null,null,[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4,["error"]],["error",3]]],[[]],[[],[["result",4,["error"]],["error",3]]],[[],[["result",4,["error"]],["error",3]]],[[],[["error",3],["result",4,["error"]]]],[[]],null,null,null,[[["u64",15]]],[[["opwrapper",3]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],[["result",4,["error"]],["error",3]]],[[]],[[],[["error",3],["result",4,["error"]]]],[[]],null,null,null,[[["argminkv",3]]],null,null,[[["u64",15]]],null,[[["asref",8,["path"]],["path",3]],[["deserializeowned",8],["error",3],["result",4,["error"]]]],null,[[]],[[["u64",15]]],null,[[["argminkv",3]]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[["f64",15]],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],null,null,[[],["error",3]],[[]],[[],["string",3]],[[["argminkv",3]],["bool",15]],[[["nooperator",3]],["bool",15]],[[["observermode",4]],["bool",15]],[[["checkpointmode",4]],["bool",15]],[[["argmincheckpoint",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["opwrapper",3],["iterstate",3]]],[[["str",15],["checkpointmode",4]],[["error",3],["result",4,["error"]]]],[[]],[[],["error",3]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[]],[[["str",15],["argminkv",3]],[["result",4,["error"]],["error",3]]],[[["str",15],["argminkv",3]],[["result",4,["error"]],["error",3]]],[[["str",15],["argminkv",3]],[["result",4,["error"]],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],null,[[],["opwrapper",3]],null,[[]],[[]],null,[[["argminkv",3]],[["option",4,["ordering"]],["ordering",4]]],[[["nooperator",3]],[["option",4,["ordering"]],["ordering",4]]],[[["minimalnooperator",3]],[["option",4,["ordering"]],["ordering",4]]],[[["observermode",4]],[["option",4,["ordering"]],["ordering",4]]],[[["argminresult",3]],[["ordering",4],["option",4,["ordering"]]]],[[["checkpointmode",4]],[["option",4,["ordering"]],["ordering",4]]],[[["argmincheckpoint",3]],[["option",4,["ordering"]],["ordering",4]]],[[["terminationreason",4]],[["option",4,["ordering"]],["ordering",4]]],[[["vec",3]]],[[["vec",3]]],null,null,null,null,null,null,null,null,[[["display",8],["str",15]]],[[["observermode",4],["observe",8]]],[[]],[[]],[[],["error",8]],[[]],[[]],[[["record",3],["serializer",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]]],[[["opwrapper",3]]],[[],[["result",4,["error"]],["error",3]]],[[["checkpointmode",4]]],[[["str",15]]],[[]],[[]],null,[[],["iterstate",3]],null,[[["str",15]],[["result",4,["error"]],["error",3]]],[[["u64",15]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["option",4]],[[]],null,[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3]],["terminationreason",4]],[[],["bool",15]],[[],["bool",15]],[[["terminationreason",4]]],[[["terminationreason",4]]],null,[[],["str",15]],[[["option",4,["duration"]],["duration",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["observermode",4],["observe",8]]],[[]],[[]],[[["str",15]]],[[["checkpointmode",4]]],[[["str",15]]],[[],["executor",3]],[[]],[[]],[[["bool",15]]],[[],["result",4]],[[]],[[["asref",8,["path"]],["path",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["u64",15]]],[[]],null,[[],[["result",4,["argminresult","error"]],["error",3],["argminresult",3]]],[[],["result",4]],[[]],[[["bool",15]]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["writetofileserializer",4]],[[],["writetofile",3]],[[]],[[]],[[["writetofileserializer",4]],["ordering",4]],[[["writetofile",3]],["ordering",4]],[[]],[[],["result",4]],[[],["result",4]],[[["writetofileserializer",4]],["bool",15]],[[["writetofile",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["writetofile",3]],["bool",15]],[[["str",15]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],[[["writetofileserializer",4]],[["option",4,["ordering"]],["ordering",4]]],[[["writetofile",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[["writetofileserializer",4]]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["argminsloglogger",3]],[[]],[[["str",15],["bool",15]],[["error",3],["result",4,["error"]]]],[[["str",15],["bool",15]],[["error",3],["result",4,["error"]]]],[[]],[[["argminkv",3]],["argminslogkv",3]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[["str",15],["argminkv",3]],[["result",4,["error"]],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],[[["record",3],["serializer",8]],["result",6]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[["duration",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["f64",15]]],[[["argminkv",3],["iterstate",3]],[["result",4,["error"]],["error",3]]],[[["surface",3]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,null,[[]],null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],null,[[]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[],["option",4]],[[]],[[]],[[]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[]],[[["str",15],["u32",15]],["result",4]],[[]],[[]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["usize",15]]],[[["u32",15]]],[[]],[[]],[[["i32",15]]],null,[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4,["f32"]],["f32",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["option",4,["i16"]],["i16",15]]],[[],[["option",4,["i32"]],["i32",15]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["option",4,["isize"]],["isize",15]]],[[]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["u16",15],["option",4,["u16"]]]],[[],[["option",4,["u32"]],["u32",15]]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["u8",15],["option",4,["u8"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],null,[[]],[[]],null,null,null,null,[[]],[[],["option",4]],[[],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["option",4,["f32"]],["f32",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["option",4,["i16"]],["i16",15]]],[[],[["option",4,["i32"]],["i32",15]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["option",4,["isize"]],["isize",15]]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["u16",15],["option",4,["u16"]]]],[[],[["option",4,["u32"]],["u32",15]]],[[],[["u64",15],["option",4,["u64"]]]],[[],[["u8",15],["option",4,["u8"]]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["usize",15]],["option",4]],[[["usize",15]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["brent",3]],[[]],[[],["result",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["brent",3]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fletcherreeves",3]],[[],["polakribiere",3]],[[],["polakribiereplus",3]],[[],["hestenesstiefel",3]],[[]],[[]],[[]],[[]],[[["fletcherreeves",3]],["ordering",4]],[[["polakribiere",3]],["ordering",4]],[[["polakribiereplus",3]],["ordering",4]],[[["hestenesstiefel",3]],["ordering",4]],[[],["fletcherreeves",3]],[[],["polakribiere",3]],[[],["polakribiereplus",3]],[[],["hestenesstiefel",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["fletcherreeves",3]],["bool",15]],[[["polakribiere",3]],["bool",15]],[[["polakribiereplus",3]],["bool",15]],[[["hestenesstiefel",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[["fletcherreeves",3]],[["option",4,["ordering"]],["ordering",4]]],[[["polakribiere",3]],[["option",4,["ordering"]],["ordering",4]]],[[["polakribiereplus",3]],[["option",4,["ordering"]],["ordering",4]]],[[["hestenesstiefel",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["conjugategradient",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[]],[[]],[[]],[[],["result",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["nonlinearconjugategradient",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[["u64",15]]],[[]],[[],["result",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[],["gaussnewtonls",3]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[],["gaussnewton",3]],[[]],[[],["gaussnewton",3]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[],["goldensectionsearch",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[],["steepestdescent",3]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["landweber",3]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[],["backtrackinglinesearch",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[],[["result",4,["error"]],["error",3]]],[[]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["armijocondition",3]],[[],["wolfecondition",3]],[[],["strongwolfecondition",3]],[[],["goldsteincondition",3]],[[]],[[]],[[]],[[]],[[],["armijocondition",3]],[[],["wolfecondition",3]],[[],["strongwolfecondition",3]],[[],["goldsteincondition",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["hagerzhanglinesearch",3]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[],[["result",4,["error"]],["error",3]]],[[]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3]],["terminationreason",4]],[[],[["error",3],["result",4,["error"]]]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[],["morethuentelinesearch",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[],[["result",4,["error"]],["error",3]]],[[]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[],["neldermead",3]],[[]],[[],["neldermead",3]],[[],["result",4]],[[]],[[]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["vec",3]]],null,null,null,[[]],[[]],[[],["newtoncg",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["error",3],["result",4,["error"]]]],null,[[]],[[]],[[],["newton",3]],[[]],[[],["newton",3]],[[],["result",4]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[],["particle",3]],[[]],null,[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],null,[[],["result",4]],[[],["result",4]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["bfgs",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["dfp",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[],["lbfgs",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[["usize",15]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["sr1",3]],[[]],[[],["result",4]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["sr1trustregion",3]],[[]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[],[["error",3],["result",4,["error"]]]],[[]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["satempfunc",4]],[[],["simulatedannealing",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],[["error",3],["result",4,["error"]]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[["u64",15]]],[[["u64",15]]],[[["satempfunc",4]]],[[["iterstate",3]],["terminationreason",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[["argminfloat",8]],["argminfloat",8]],null,null,null,[[]],[[]],[[],["cauchypoint",3]],[[]],[[],["cauchypoint",3]],[[],["result",4]],[[["cauchypoint",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[["cauchypoint",3]],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[["cauchypoint",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["dogleg",3]],[[]],[[],["dogleg",3]],[[],["result",4]],[[["dogleg",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[["dogleg",3]],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[["dogleg",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["steihaug",3]],[[]],[[],["steihaug",3]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[["steihaug",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[["u64",15]]],[[["steihaug",3]],["bool",15]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[["steihaug",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["result",4]],[[]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[],["trustregion",3]],[[]],[[],["result",4]],[[],[["error",3],["result",4,["error"]]]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["result",4,["option","error"]],["option",4,["argminiterdata"]],["error",3]]],[[]],[[],["bool",15]],[[]],[[]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["error",3],["result",4,["argminiterdata","error"]]]],[[]],[[],["result",4]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"TerminationReason"],[4,"ObserverMode"],[4,"CheckpointMode"],[4,"WriteToFileSerializer"],[4,"ArgminError"],[8,"ArgminOp"],[8,"Solver"],[8,"ArgminAdd"],[3,"NoOperator"],[3,"MinimalNoOperator"],[3,"OpWrapper"],[3,"Error"],[3,"IterState"],[3,"ArgminKV"],[3,"Observer"],[3,"ArgminResult"],[3,"ArgminCheckpoint"],[3,"ArgminIterData"],[8,"ArgminConj"],[8,"ArgminDiv"],[8,"ArgminDot"],[8,"ArgminEye"],[8,"ArgminInv"],[3,"ArgminSlogKV"],[8,"ArgminMinMax"],[8,"ArgminMul"],[8,"ArgminNorm"],[8,"Observe"],[8,"ArgminRandom"],[8,"ArgminScaledAdd"],[8,"ArgminScaledSub"],[8,"ArgminLineSearch"],[8,"ArgminTrustRegion"],[8,"ArgminSub"],[8,"ArgminTranspose"],[8,"ArgminNLCGBetaUpdate"],[8,"ArgminWeightedDot"],[8,"ArgminZero"],[8,"ArgminZeroLike"],[13,"InvalidParameter"],[13,"NotImplemented"],[13,"NotInitialized"],[13,"ConditionViolated"],[13,"CheckpointNotFound"],[13,"ImpossibleError"],[13,"Every"],[13,"Every"],[3,"Executor"],[3,"WriteToFile"],[3,"ArgminSlogLogger"],[3,"Visualizer3d"],[3,"Surface"],[8,"FloatConst"],[4,"FloatErrorKind"],[8,"Num"],[8,"Inv"],[8,"MulAdd"],[8,"Pow"],[8,"Float"],[8,"Signed"],[8,"AsPrimitive"],[3,"ParseFloatError"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"PrimInt"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"ToPrimitive"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"FloatCore"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"],[4,"BrentError"],[3,"Brent"],[3,"FletcherReeves"],[3,"PolakRibiere"],[3,"PolakRibierePlus"],[3,"HestenesStiefel"],[3,"ConjugateGradient"],[3,"NonlinearConjugateGradient"],[3,"GaussNewtonLS"],[3,"GaussNewton"],[3,"GoldenSectionSearch"],[3,"SteepestDescent"],[3,"Landweber"],[3,"BacktrackingLineSearch"],[3,"ArmijoCondition"],[3,"WolfeCondition"],[3,"StrongWolfeCondition"],[3,"GoldsteinCondition"],[8,"LineSearchCondition"],[3,"HagerZhangLineSearch"],[3,"MoreThuenteLineSearch"],[3,"NelderMead"],[3,"NewtonCG"],[3,"Newton"],[3,"ParticleSwarm"],[3,"Particle"],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,"SR1TrustRegion"],[4,"SATempFunc"],[3,"SimulatedAnnealing"],[13,"Exponential"],[3,"CauchyPoint"],[3,"Dogleg"],[3,"Steihaug"],[3,"TrustRegion"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};